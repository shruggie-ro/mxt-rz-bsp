From 41fa9fa96181bd5bb19b28404c4d2a98737a0fb2 Mon Sep 17 00:00:00 2001
From: Alexandru Ardelean <alex@shruggie.ro>
Date: Mon, 3 Jun 2024 15:54:12 +0300
Subject: [PATCH] drm/bridge: lt8912b: add support for 'lane-polarities'
 property

The 'lane-polarities' property is a standard DT property, defined for
CSI/DSI interfaces.

For the Lontium LT8912B driver, we need to ensure that the polarities are
the same for all lanes, are there is a single switch for all of them.

After the lt8912_write_init_config() function writes the initial
register-sequence configuration, we write the register to invert the
polarities for the lanes.

This ensures, that this doesn't break the initial behavior, as this change
was tested with a HW design where the polarities are inverted.

Signed-off-by: Alexandru Ardelean <alex@shruggie.ro>
---
 drivers/gpu/drm/bridge/lontium-lt8912b.c | 52 +++++++++++++++++++++++-
 1 file changed, 50 insertions(+), 2 deletions(-)

diff --git a/drivers/gpu/drm/bridge/lontium-lt8912b.c b/drivers/gpu/drm/bridge/lontium-lt8912b.c
index ac76c2363..7e08803d5 100644
--- a/drivers/gpu/drm/bridge/lontium-lt8912b.c
+++ b/drivers/gpu/drm/bridge/lontium-lt8912b.c
@@ -18,6 +18,8 @@
 
 #include <video/videomode.h>
 
+#define MAX_DP_LANES 4
+
 #define I2C_MAIN 0
 #define I2C_ADDR_MAIN 0x48
 
@@ -45,6 +47,7 @@ struct lt8912 {
 
 	u8 data_lanes;
 	bool is_power_on;
+	bool lane_polarities_inverted;
 };
 
 static int lt8912_write_init_config(struct lt8912 *lt)
@@ -83,8 +86,16 @@ static int lt8912_write_init_config(struct lt8912 *lt)
 		{0x41, 0x3c},
 		{0xB2, 0x00},
 	};
+	int ret;
 
-	return regmap_multi_reg_write(lt->regmap[I2C_MAIN], seq, ARRAY_SIZE(seq));
+	ret = regmap_multi_reg_write(lt->regmap[I2C_MAIN], seq, ARRAY_SIZE(seq));
+	if (ret < 0)
+		return ret;
+
+	if (lt->lane_polarities_inverted)
+		return regmap_write(lt->regmap[I2C_MAIN], 0x3e, 0xf6);
+
+	return 0;
 }
 
 static int lt8912_write_mipi_basic_config(struct lt8912 *lt)
@@ -634,6 +645,38 @@ static const struct drm_bridge_funcs lt8912_bridge_funcs = {
 	.get_edid = lt8912_bridge_get_edid,
 };
 
+static int lt8912_parse_lane_polarities_dt(struct lt8912 *lt)
+{
+	u32 lane_polarities[MAX_DP_LANES] = {};
+	struct device *dev = lt->dev;
+	int i, ret;
+	u32 pol;
+
+	ret = of_property_read_u32_array(dev->of_node, "lane-polarities",
+					 lane_polarities, lt->data_lanes);
+	if (ret == -EINVAL)
+		return 0;
+
+	if (ret < 0) {
+		dev_err(dev, "%s: Bad lane-polarities property: %d\n",
+			__func__, ret);
+		return ret;
+	}
+
+	/* check that all lane polarities are the same */
+	pol = lane_polarities[0];
+	for (i = 1; i < lt->data_lanes; i++) {
+		if (pol == lane_polarities[i])
+			continue;
+		dev_err(dev, "%s: All polarities must be the same\n", __func__);
+		return -EINVAL;
+	}
+
+	lt->lane_polarities_inverted = !!pol;
+
+	return 0;
+}
+
 static int lt8912_parse_dt(struct lt8912 *lt)
 {
 	struct gpio_desc *gp_reset;
@@ -651,7 +694,8 @@ static int lt8912_parse_dt(struct lt8912 *lt)
 	}
 	lt->gp_reset = gp_reset;
 
-	data_lanes = drm_of_get_data_lanes_count_ep(dev->of_node, 0, -1, 1, 4);
+	data_lanes = drm_of_get_data_lanes_count_ep(dev->of_node, 0, -1, 1,
+						    MAX_DP_LANES);
 	if (data_lanes < 0) {
 		dev_err(lt->dev, "%s: Bad data-lanes property\n", __func__);
 		return data_lanes;
@@ -659,6 +703,10 @@ static int lt8912_parse_dt(struct lt8912 *lt)
 
 	lt->data_lanes = data_lanes;
 
+	ret = lt8912_parse_lane_polarities_dt(lt);
+	if (ret < 0)
+		return ret;
+
 	lt->host_node = of_graph_get_remote_node(dev->of_node, 0, -1);
 	if (!lt->host_node) {
 		dev_err(lt->dev, "%s: Failed to get remote port\n", __func__);
-- 
2.45.1

